apply plugin: 'com.android.application'

android {
    compileSdkVersion 25
    buildToolsVersion '26.0.2'
    flavorDimensions 'default'
    defaultConfig {
        applicationId APPLICATION_ID
        minSdkVersion 16
        targetSdkVersion 25
        versionCode 1
        versionName "1.0"
        multiDexEnabled true
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        ndk {
            abiFilters "x86"
            abiFilters "armeabi"
        }
        javaCompileOptions.annotationProcessorOptions.includeCompileClasspath = true
    }

    signingConfigs {
        eros {
            keyAlias 'eros签名实例'
            keyPassword 'erosdemo'
            storeFile file('../eros_demo.jks')
            storePassword 'erosdemo'
            v2SigningEnabled false
        }
    }


    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.eros
            manifestPlaceholders=[UMENG_APP_KEY:UMENG_APPKEY,
                                  GETUI_APP_ID:GETUI_APPID,
                                  GETUI_APP_KEY:GETUI_APPKEY,
                                  GETUI_APP_SECRET:GETTUI_APPSECRET,
                                  APP_ID:APPLICATION_ID
            ]
        }

        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.eros
            manifestPlaceholders=[UMENG_APP_KEY:UMENG_APPKEY,
                                  GETUI_APP_ID:GETUI_APPID,
                                  GETUI_APP_KEY:GETUI_APPKEY,
                                  GETUI_APP_SECRET:GETTUI_APPSECRET,
                                  APP_ID:APPLICATION_ID
            ]
        }

    }

    lintOptions {
        checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }


    productFlavors {
        samplechannel{
            dimension 'default'
        }

        yingyongbao{
            dimension 'default'
        }
    }
    productFlavors.all {
        flavor -> flavor.manifestPlaceholders = [UMENG_CHANNEL_VALUE: name]
    }

    sourceSets {
        main {
            jniLibs.srcDirs=['../wxframework/libs']
        }
    }
}

repositories {
    mavenCentral()
    flatDir {

        dirs '../wxframework/libs', 'libs'

    }
    google()
}


dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile "com.android.support:support-v4:${PROJECT_SUPPORTLIBVERSION}"
    testCompile 'junit:junit:4.12'
    compile project(':wxframework')
    compile project(':nexus')
    //    友盟统计
    compile project(':erospluginum')
    //Amap
    compile project(':ErosPluginAmap')
    //个推
    compile project(':erosplugingt')
    //微信支付
    compile project(':erospluginwxpay')
    //分享
    compile project(':erospluginwxshare')
    //lottie
    compile project(':weexlottie')
//    nat 系列
    compile project(':nataccelerometer')
    compile project(':natalipay')
    compile project(':nataudio')
    compile project(':natbattery')
    compile project(':natcamera')
    compile project(':natcommunication')
    compile project(':natcompass')
    compile project(':natgeolocation')
    compile project(':natimage')
    compile project(':natinfo')
    compile project(':natmodal')
    compile project(':natnetwork')
    compile project(':natrecorder')
    compile project(':natscreen')
    compile project(':natstream')
    compile project(':nattransfer')
    compile project(':natvibration')
    compile project(':natvideo')
    compile project(':natvolume')
//    compile project(':natwechat')
//    路由器相关
    compile project(':router')
//    pdf
//    compile project(':pdfviewer')
//    gcanvas
//    compile "com.taobao.gcanvas:corelib:1.0.4"
//    compile "com.taobao.gcanvas.adapters:img:1.0.0"
//    compile "com.taobao.gcanvas.bridges:spec:1.0.1"
//    compile "com.taobao.gcanvas.bridges:weex:1.0.2"
//    compile "com.taobao.gcanvas.adapters:img_fresco:1.0.1"
}
